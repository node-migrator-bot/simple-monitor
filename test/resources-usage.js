// Generated by CoffeeScript 1.3.1
(function() {
  var assert, defaultConfig, _;

  assert = require('assert');

  _ = require('underscore');

  defaultConfig = {
    usage: {
      cycle: 0,
      resources: {
        ram: {
          enabled: true,
          handler: require('../lib/usage/ram'),
          listeners: {
            test: 100
          },
          events: {
            test: function(value, callback) {
              assert.equal(value >= 100, true, 'RAM usage monitor fail');
              return callback(null, value);
            }
          }
        }
      }
    }
  };

  suite('Resources Usage', function() {
    test('Check RAM usage', function(done) {
      return (require('../lib/usage/ram'))(function(error, value) {
        assert.equal(error, null, error);
        assert.notEqual(parseInt(value), 0, 'No usage, smth wrong');
        console.log(value);
        return done();
      });
    });
    test('Check CPU usage', function(done) {
      return (require('../lib/usage/cpu'))(function(error, value) {
        assert.equal(error, null, error);
        assert.notEqual(parseInt(value), 0, 'No usage, smth wrong');
        if (value > 1) {
          console.log(value);
        }
        return done();
      });
    });
    test('Check usage event handlers', function(done) {
      var monitor;
      monitor = (require('../lib/monitor'))({});
      _.extend(monitor.config, monitor.config, defaultConfig);
      return monitor.checkUsage(function(error, results) {
        return done();
      });
    });
    test('Check if tracking is runned continuesly', function(done) {
      var monitor;
      monitor = (require('../lib/monitor'))({});
      _.extend(monitor.config, monitor.config, defaultConfig);
      return monitor.trackUsage(function(error) {
        assert.notEqual(monitor.trackUsageCycles, null, 'Usage tracking was not runned properly');
        if (monitor.trackUsageCycles > 5) {
          monitor.config.usage.cycle = false;
          return done();
        }
      });
    });
    test('Check => comparation type', function(done) {
      var monitor;
      monitor = (require('../lib/monitor'))({});
      defaultConfig.usage.resources.ram.listeners.test = '>=100';
      defaultConfig.usage.resources.ram.events.test = function(value, callback) {
        assert.equal(value >= 100, true, 'RAM usage monitor fail');
        done();
      };
      _.extend(monitor.config, monitor.config, defaultConfig);
      return monitor.checkUsage(function(error, results) {
        return assert.ok(false, '>= event was not triggered properly');
      });
    });
    return test('Check <= comparation type', function(done) {
      var monitor;
      monitor = (require('../lib/monitor'))({});
      defaultConfig.usage.resources.ram.listeners.test = '<=1000000000';
      defaultConfig.usage.resources.ram.events.test = function(value, callback) {
        assert.equal(value <= 1000000000, true, 'RAM usage monitor fail');
        done();
      };
      _.extend(monitor.config, monitor.config, defaultConfig);
      return monitor.checkUsage(function(error, results) {
        return assert.ok(false, '<= event was not triggered properly');
      });
    });
  });

}).call(this);
