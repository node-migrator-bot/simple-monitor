// Generated by CoffeeScript 1.3.1
(function() {

  module.exports = function(monitorConfig, config, message, object, type, callback) {
    var async, fs, mailOptions, nodemailer, path, send, smtpTransport, tasks, _;
    _ = require('underscore');
    fs = require('fs');
    path = require('path');
    nodemailer = require('nodemailer');
    async = require('async');
    smtpTransport = nodemailer.createTransport("SMTP", config.mailer);
    mailOptions = {
      from: "" + monitorConfig.project + " <no-reply@>simple-monitor.info",
      to: config.email,
      subject: type.charAt(0).toUpperCase() + type.slice(1) + (": " + monitorConfig.project)
    };
    send = function(sendCallback, results) {
      return smtpTransport.sendMail(mailOptions, function(error, response) {
        if (error) {
          sendCallback(error);
          return;
        }
        smtpTransport.close();
        return sendCallback();
      });
    };
    tasks = {
      build_text: function(taskCallback) {
        var _ref;
        return fs.readFile((_ref = config.textTemplate) != null ? _ref : __dirname + '/resources/email.txt', 'utf8', function(error, data) {
          if (error) {
            taskCallback(error);
            return;
          }
          mailOptions.text = _.template(data, {
            message: message,
            type: type,
            dump: (require('util')).inspect(object),
            date: new Date().toString()
          });
          return taskCallback(null, mailOptions.text);
        });
      },
      build_html: function(taskCallback) {
        var _ref;
        return fs.readFile((_ref = config.htmlTemplate) != null ? _ref : __dirname + '/resources/email.html', 'utf8', function(error, data) {
          if (error) {
            taskCallback(error);
            return;
          }
          mailOptions.html = _.template(data, {
            message: message,
            type: type,
            dump: (require('util')).inspect(object),
            date: new Date().toString()
          });
          return taskCallback(null, mailOptions.html);
        });
      },
      send_email: ['build_text', 'build_html', send]
    };
    return async.auto(tasks, callback);
  };

}).call(this);
